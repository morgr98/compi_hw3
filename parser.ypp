%{
#include "output.hpp"
#include <iostream>
#include <stdlib.h>
extern int yylex();
extern int yylineno;
using namespace output;
int yyerror(const char * message);
%}

%nonassoc ID STRING NUM VOID INT BYTE B BOOL
%right ASSIGN
%left OR
%left AND
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc IF
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc COMMA
%nonassoc LBRACE
%nonassoc RBRACE
%left EQUAL_RELOP
%left RELOP
%left MULT_DIV
%left PLUS_MINUS
%right NOT
%left LPAREN
%left RPAREN
%left SC
%nonassoc ELSE

%%
Program : Funcs
 { output::printProductionRule(1); }
Funcs : /* Epsilon */
 { output::printProductionRule(2); }
Funcs : FuncDecl Funcs
 { output::printProductionRule(3); }
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE
 { output::printProductionRule(4); }
RetType : Type
 { output::printProductionRule(5); }
RetType :  VOID
 { output::printProductionRule(6); }
Formals : /* Epsilon */
 { output::printProductionRule(7); }
Formals : FormalsList
 { output::printProductionRule(8); }
FormalsList : FormalDecl
 { output::printProductionRule(9); }
FormalsList : FormalDecl COMMA FormalsList
 { output::printProductionRule(10); }
FormalDecl : Type ID
 { output::printProductionRule(11); }
Statements : Statement
 { output::printProductionRule(12); }
Statements : Statements Statement
 { output::printProductionRule(13); }
Statement : LBRACE Statements RBRACE
 { output::printProductionRule(14); }
Statement : Type ID SC
 { output::printProductionRule(15); }
Statement : Type ID ASSIGN Exp SC
 { output::printProductionRule(16); }
Statement : ID ASSIGN Exp SC
 { output::printProductionRule(17); }
Statement : Call SC
 { output::printProductionRule(18); }
Statement : RETURN SC
 { output::printProductionRule(19); }
Statement : RETURN Exp SC
 { output::printProductionRule(20); }
Statement : IF LPAREN Exp RPAREN Statement
 { output::printProductionRule(21); }
Statement : IF LPAREN Exp RPAREN Statement ELSE Statement
 { output::printProductionRule(22); }
Statement : WHILE LPAREN Exp RPAREN Statement
 { output::printProductionRule(23); }
Statement : BREAK SC
 { output::printProductionRule(24); }
Statement : CONTINUE SC
 { output::printProductionRule(25); }
Call : ID LPAREN ExpList RPAREN
 { output::printProductionRule(26); }
Call : ID LPAREN RPAREN
 { output::printProductionRule(27); }
ExpList : Exp
 { output::printProductionRule(28); }
ExpList : Exp COMMA ExpList
 { output::printProductionRule(29); }
Type : INT
 { output::printProductionRule(30); }
Type : BYTE
 { output::printProductionRule(31); }
Type : BOOL
 { output::printProductionRule(32); }
Exp : LPAREN Exp RPAREN
 { output::printProductionRule(33); }
Exp : Exp PLUS_MINUS Exp
 { output::printProductionRule(34); }
Exp : Exp MULT_DIV Exp
  { output::printProductionRule(34); }
Exp : ID
 { output::printProductionRule(35); }
Exp : Call
 { output::printProductionRule(36); }
Exp : NUM
 { output::printProductionRule(37); }
Exp : NUM B
 { output::printProductionRule(38); }
Exp : STRING
 { output::printProductionRule(39); }
Exp : TRUE
 { output::printProductionRule(40); }
Exp : FALSE
 { output::printProductionRule(41); }
Exp : NOT Exp
 { output::printProductionRule(42); }
Exp : Exp AND Exp
 { output::printProductionRule(43); }
Exp : Exp OR Exp
 { output::printProductionRule(44); }
Exp : Exp RELOP Exp
 { output::printProductionRule(45); }
Exp : Exp EQUAL_RELOP Exp
  { output::printProductionRule(45); }
Exp : LPAREN Type RPAREN Exp
 { output::printProductionRule(46); }
%%
int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
}
%{
#include "hw3_output.hpp"
#include "Stypes.hpp"
#include "SymbolTable.hpp"
#include <iostream>
#include <stdlib.h>
extern int yylex();
extern int yylineno;
using namespace output;

int yyerror(const char * message);

SymbolTable *sym_table = SymbolTable::getSymTable();
%}


%nonassoc ID STRING NUM VOID INT BYTE B BOOL
%right ASSIGN
%left OR
%left AND
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc IF
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc COMMA
%nonassoc LBRACE
%nonassoc RBRACE
%left EQUAL_RELOP
%left RELOP
%left MULT_DIV
%left PLUS_MINUS
%right NOT
%left LPAREN
%left RPAREN
%left SC
%nonassoc ELSE

%%
Program : Funcs {sym_table->closeScope();}
Funcs : /* Epsilon */
        | FuncDecl Funcs
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE ScopeOpen {
            RetType_c* ret_type =  (RetType_c*)$1;
            Formals_c* formals = (Formals_c*)$4;
            ID_c* id = (ID_c*)$2;
            id->type = ret_type->type;
            //TODO: do we need special one for funcitons? or functions funcitons and regular vars cant share ids?
            if (sym_table->isAlreadyDecInScope(id->name)) {
                    errorDef(yylineno, id->name);
                    exit(1);
            }
            $$ = new FuncDecl_c(ret_type->type , formals->decls, id->name);
            sym_table->addFunction(sym_table->tables.top(), id->name, ret_type->type, NO_OFFSET);
            sym_table->addFunctionParams(formals->decls);
        } Statements RBRACE {sym_table->closeScope();}
RetType : Type {Type_c* type = (Type_c*)$1;
                $$ = new RetType_c(type->type);}
        |  VOID { $$ = new RetType_c(Void_t);}
Formals : /* Epsilon */
        {  $$ = new Formals_c();}
        | FormalsList 
          {    FormalsList_c* formal_list = (FormalsList_c*)$1;
                $$ = new Formals_c(formal_list->decls);}
FormalsList : FormalDecl {FormalDecl_c* formaldecl = (FormalDecl_c*)$1;
                            std::vector<FormalDecl_c*> vec;
                            vec.push_back(formaldecl);
                            FormalsList_c* formals_list = new FormalsList_c(vec);
                            $$ = formals_list;}
        | FormalDecl COMMA FormalsList
        {
            FormalDecl_c* formaldecl = (FormalDecl_c*)$1;
            FormalsList_c* formal_list = (FormalsList_c*)$3;
            formal_list->decls.push_back(formaldecl);
            $$ = new FormalsList_c(formal_list->decls);
        }
FormalDecl : Type ID    {Type_c* type = (Type_c*)$1;
                        ID_c* id = (ID_c*)$2;
                        if (sym_table->isAlreadyDecInScope(id->name)) {
                                errorDef(yylineno, id->name);
                                exit(1);
                        }
                        //TODO: not sure if need to add here - conclusion: no because need to add only after funciton scopes open
                        //sym_table->insert(sym_table->tables.top(), id->name, type->type, sym_table->offsets.top() + 1);
                        FormalDecl_c* formaldecl = new FormalDecl_c(type->type, id->name);
                        $$ = formaldecl;}
Statements : Statement
            | Statements Statement
Statement : LBRACE ScopeOpen Statements RBRACE {sym_table->closeScope();}
            | Type ID SC {Type_c* type = (Type_c*)$1;
                        ID_c* id = (ID_c*)$2;
                        if (sym_table->isAlreadyDecInScope(id->name)) {
                                errorDef(yylineno, id->name);
                                exit(1);
                        }
                        sym_table->insert(sym_table->tables.top(), id->name, type->type, sym_table->offsets.top() + 1);
                        id->type = type->type;
                        //TODO: need something for the statement?
                        }
            | Type ID ASSIGN Exp SC     {Type_c* type = (Type_c*)$1;
                                        ID_c* id = (ID_c*)$2;
                                        Exp_c* exp = (Exp_c*)$4;
                                        if (sym_table->isAlreadyDecInScope(id->name)) {
                                                errorDef(yylineno, id->name);
                                                exit(1);
                                        }
                                        if (!checkTypeExp(*type, *exp)) {
                                                 errorMismatch(yylineno);
                                                 exit(1);
                                        }
                                        sym_table->insert(sym_table->tables.top(), id->name, type->type, sym_table->offsets.top() + 1);
                                        id->type = type->type;
                                        //TODO: need something for the statement?
                                        }
            | ID ASSIGN Exp SC
            {
                ID_c* id = (ID_c*)($1);
                Exp_c* exp = (Exp_c*)$4;
                if(!sym_table->isDec(id->name, false))
                {
                     errorUndef(yylineno, id->name);
                     exit(1);
                }
                 if (!checkTypeExpId(*id, *exp)) {
                     errorMismatch(yylineno);
                     exit(1);
                }
            }
            | Call SC  // no needed a check?
            | RETURN SC
            {
                if(!sym_table->checkSamefunctionReturnType(Void_t))
                {
                    errorMismatch(yylineno);
                    exit(1);
                }
            }
            | RETURN Exp SC
            {
                Exp_c* exp1 = (Exp_c*)$2;
                if(!sym_table->checkSamefunctionReturnType(exp1->type))
                {
                    errorMismatch(yylineno);
                    exit(1);
                }
            }
            | IF ScopeOpen LPAREN Exp RPAREN Statement 
            {
                Exp_c* exp1 = (Exp_c*)$4;
                if (!checkBoolExp(*(Exp_c*)$4))
                {
                    errorMismatch(yylineno);
                    exit(1);
                }
                sym_table->closeScope();
            }
            | IF ScopeOpen LPAREN Exp RPAREN Statement ELSE ScopeOpen Statement ScopeClose
            {
            if (!checkBoolExp(*(Exp_c*)$4))
                {
                    errorMismatch(yylineno);
                    exit(1);
                }
                sym_table->closeScope();
            }
            | WHILE ScopeWhileOpen LPAREN Exp RPAREN ScopeOpen Statement 
            {
            if (!checkBoolExp(*(Exp_c*)$4))
                {
                    errorMismatch(yylineno);
                    exit(1);
                }
                sym_table->closeScope();
            }  
            | BREAK SC
            {
                if(!sym_table->inScopeWhile(sym_table->tables.top()))
                {
                    errorUnexpectedBreak(yylineno);
                }
            }
            | CONTINUE SC
            {
                if(!sym_table->inScopeWhile(sym_table->tables.top()))
                {
                    errorUnexpectedContinue(yylineno);
                }
            }
Call : ID LPAREN ExpList RPAREN
        {
         ID_c* id = (ID_c*)($1);
         ExpList_c* exp_list = (ExpList_c*)$3;
         if(!sym_table->isDec(id->name , true))
        {
             errorUndefFunc(yylineno, id->name);
             exit(1);
        }
        sym_table->checkFunctionParams(*exp_list, id->name);
        $$ = new Call_c(id->type, id->name);
        }
    | ID LPAREN RPAREN
    {
        ID_c* id = (ID_c*)($1);  
        if(!sym_table->isDec(id->name , true))
        {
             errorUndefFunc(yylineno, id->name);
             exit(1);
        }
        sym_table->checkFunctionParams(id->name);
        $$ = new Call_c(id->type, id->name);
    }
ExpList : Exp
        {
            Exp_c* exp1 = (Exp_c*)$1;
            std::vector<Exp_c*> expressions;
            expressions.push_back(exp1);
            $$ = new ExpList_c(expressions);
        }
        | Exp COMMA ExpList
        {
            Exp_c* exp1 = (Exp_c*)$1;
            ExpList_c* exp_list = (ExpList_c*)$3;
            exp_list->expressions.push_back(exp1);
            $$ = new ExpList_c(exp_list->expressions);  
        }
Type : INT  {$$ = new Type_c(Int_t);}
        | BYTE {$$ = new Type_c(Byte_t);}
        | BOOL {$$ = new Type_c(Bool_t);}
Exp : LPAREN Exp RPAREN {
        Exp_c* exp = (Exp_c*)$2;
        $$ = new Exp_c(exp->type);
        }
    | Exp IF LPAREN Exp RPAREN ELSE Exp
    {
        Exp_c* exp1 = (Exp_c*)$1;
        Exp_c* exp2 = (Exp_c*)$4;
        Exp_c* exp3 = (Exp_c*)$7;
        if(checkBoolExp(*exp2) && checkSameTypeExp(*exp1, *exp3) == None_t)
        {
            errorMismatch(yylineno);
            exit(1);
        }
        else
        {
            $$ = new Exp_c(checkSameTypeExp(*exp1, *exp2));         
        }
    }
    | Exp PLUS_MINUS Exp
    {
        if(checkNumType(*(Exp_c*)$1, *(Exp_c*)$3) == None_t)
        {
            errorMismatch(yylineno);
            exit(1);
        }
        $$ = new Exp_c(checkNumType(*(Exp_c*)$1, *(Exp_c*)$3));
    }
    | Exp MULT_DIV Exp
    {
        if(checkNumType(*(Exp_c*)$1, *(Exp_c*)$3) == None_t)
        {
            errorMismatch(yylineno);
            exit(1);
        }
        $$ = new Exp_c(checkNumType(*(Exp_c*)$1, *(Exp_c*)$3));
    }
    | ID        {ID_c* id = (ID_c*)($1);
                if(!sym_table->isDec(id->name, false)) {
                        errorUndef(yylineno, id->name);
                        exit(1);
                }
                $$ = new Exp_c(sym_table->getTypeByName(id->name));}
    | Call
    {
        Call_c* call = (Call_c*)$1;
        $$ = new Exp_c(call->type);
    }
    | NUM {$$ = new Exp_c(Int_t);}
    | NUM B {
        Num_c* num = (Num_c*)$1;
        int value = stoi(num->num_str);
        if (value > 255)
        {
            errorByteTooLarge(yylineno, num->num_str);
            exit(1);
        }
        $$ = new Exp_c(Byte_t);}
    | STRING {$$ = new Exp_c(String_t);}
    | TRUE {$$ = new Exp_c(Bool_t);}
    | FALSE {$$ = new Exp_c(Bool_t);}
    | NOT Exp {if (checkBoolExp(*(Exp_c*)$1))
                    $$ = new Exp_c(Bool_t);
                else
                    errorMismatch(yylineno);
                    exit(1);}
    | Exp AND Exp {if (checkBoolExp(*(Exp_c*)$1, *(Exp_c*)$3))
                        $$ = new Exp_c(Bool_t);
                   else
                        errorMismatch(yylineno);
                        exit(1);}
    | Exp OR Exp {if (checkBoolExp(*(Exp_c*)$1, *(Exp_c*)$3))
                        $$ = new Exp_c(Bool_t);
                  else{
                        errorMismatch(yylineno);
                        exit(1);}
                    }

    | Exp RELOP Exp
    
    {
        Exp_c* exp1 = (Exp_c*)$1;
        Exp_c* exp2 = (Exp_c*)$3;
        if(checkNumType(*exp1, *exp2) == None_t)
        {
            errorMismatch(yylineno);
            exit(1);

        }
        else
           $$ = new Exp_c(Bool_t);
    }
    | Exp EQUAL_RELOP Exp
    {
        Exp_c* exp1 = (Exp_c*)$1;
        Exp_c* exp2 = (Exp_c*)$3;
        if(checkNumType(*exp1, *exp2) == None_t)
        {
            errorMismatch(yylineno);
            exit(1);

        }
        else
           $$ = new Exp_c(Bool_t);
    }
    | LPAREN Type RPAREN Exp
    {
        Type_c* type = (Type_c*)$2;
        Exp_c* exp = (Exp_c*)$4;
        if(checkAssigment(type->type , *exp) != None_t)
            $$ = new Exp_c(type->type);
        else
        {
            errorMismatch(yylineno);
            exit(1);
        }
    }
ScopeOpen : /* Epsilon */ {std::cout << "NEW SCOPE" << endl;
                            sym_table->newScope(false);}
ScopeWhileOpen : /* Epsilon */ {std::cout << "NEW SCOPE" << endl;
                            sym_table->newScope(true);}
ScopeClose : /* Epsilon */ {sym_table->closeScope();}                         
%%

int main()
{
    sym_table->makeGlob();
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
}

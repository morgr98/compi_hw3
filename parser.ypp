%{
#include "hw3_output.hpp"
#include "Stypes.h"
#include <iostream>
#include <stdlib.h>
extern int yylex();
extern int yylineno;
using namespace output;
int yyerror(const char * message);
%}

%nonassoc ID STRING NUM VOID INT BYTE B BOOL
%right ASSIGN
%left OR
%left AND
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc IF
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc COMMA
%nonassoc LBRACE
%nonassoc RBRACE
%left EQUAL_RELOP
%left RELOP
%left MULT_DIV
%left PLUS_MINUS
%right NOT
%left LPAREN
%left RPAREN
%left SC
%nonassoc ELSE

%%
Program : Funcs
Funcs : /* Epsilon */
        | FuncDecl Funcs
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE
RetType : Type
        |  VOID
Formals : /* Epsilon */
        | FormalsList
FormalsList : FormalDecl
        | FormalDecl COMMA FormalsList
FormalDecl : Type ID
Statements : Statement
            | Statements Statement
Statement : LBRACE Statements RBRACE
            | Type ID SC
            | Type ID ASSIGN Exp SC
            | ID ASSIGN Exp SC
            | Call SC
            | RETURN SC
            | RETURN Exp SC
            | IF LPAREN Exp RPAREN Statement
            | IF LPAREN Exp RPAREN Statement ELSE Statement
            | WHILE LPAREN Exp RPAREN Statement
            | BREAK SC
            | CONTINUE SC
Call : ID LPAREN ExpList RPAREN
    | ID LPAREN RPAREN
ExpList : Exp
        | Exp COMMA ExpList
Type : INT
        | BYTE
        | BOOL
Exp : LPAREN Exp RPAREN
    | Exp IF LPAREN Exp RPAREN ELSE Exp
    | Exp PLUS_MINUS Exp
    | Exp MULT_DIV Exp
    | ID {$$ = new Exp_c(NONE_t)}
    | Call
    | NUM {$$ = new Exp_c(Int_t);}
    | NUM B {$$ = new Exp_c(Byte_t);}
    | STRING {$$ = new Exp_c(String_t);}
    | TRUE {$$ = new Exp_c(Bool_t);}
    | FALSE {$$ = new Exp_c(Bool_t);}
    | NOT Exp {if (checkBoolExp((Exp_c)$1))
                    $$ = new Exp_c(Bool_t)
                else
                    errorMismatch(yylineno);}
    | Exp AND Exp {if (CheckBoolExp((Exp_c)$1, (Exp_c)$3))
                        $$ = new Exp_c(Bool_t);
                   else
                        errorMismatch(yylineno);}
    | Exp OR Exp {if (CheckBoolExp((Exp_c)$1, (Exp_c)$3))
                        $$ = new Exp_c(Bool_t);
                  else
                        errorMismatch(yylineno);}
    | Exp RELOP Exp
    | Exp EQUAL_RELOP Exp
    | LPAREN Type RPAREN Exp
%%
int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
}
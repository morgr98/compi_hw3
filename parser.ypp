%{
#include "hw3_output.hpp"
#include "Stypes.hpp"
#include "SymbolTable.hpp"
#include <iostream>
#include <stdlib.h>
extern int yylex();
extern int yylineno;
using namespace output;

int yyerror(const char * message);

SymbolTable *sym_table = new SymbolTable();

%}

%nonassoc ID STRING NUM VOID INT BYTE B BOOL
%right ASSIGN
%left OR
%left AND
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc IF
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc COMMA
%nonassoc LBRACE
%nonassoc RBRACE
%left EQUAL_RELOP
%left RELOP
%left MULT_DIV
%left PLUS_MINUS
%right NOT
%left LPAREN
%left RPAREN
%left SC
%nonassoc ELSE

%%
Program : Funcs
Funcs : /* Epsilon */
        | FuncDecl Funcs
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE ScopeOpen Statements RBRACE {sym_table->closeScope();}
RetType : Type
        |  VOID
Formals : /* Epsilon */
        | FormalsList
FormalsList : FormalDecl {FormalDecl_c* formaldecl = (FormalDecl_c*)$1;
                            std::vector<FormalDecl_c*> vec;
                            vec.push_back(formaldecl);
                            FormalsList_c* formals_list = new FormalsList_c(vec);
                            $$ = formals_list;}
        | FormalDecl COMMA FormalsList
FormalDecl : Type ID    {Type_c* type = (Type_c*)$1;
                        ID_c* id = (ID_c*)$2;
                        if (sym_table->isAlreadyDecInScope(id->name)) {
                                errorDef(yylineno, id->name);
                                exit(1);
                        }
                        //TODO: not sure if need to add here
                        sym_table->insert(sym_table->tables.top(), id->name, type->type, sym_table->offsets.top() + 1);
                        FormalDecl_c* formaldecl = new FormalDecl_c(type->type, id->name);
                        $$ = formaldecl;}
Statements : Statement
            | Statements Statement
Statement : LBRACE ScopeOpen Statements RBRACE {sym_table->closeScope();}
            | Type ID SC {Type_c* type = (Type_c*)$1;
                        ID_c* id = (ID_c*)$2;
                        if (sym_table->isAlreadyDecInScope(id->name)) {
                                errorDef(yylineno, id->name);
                                exit(1);
                        }
                        sym_table->insert(sym_table->tables.top(), id->name, type->type, sym_table->offsets.top() + 1);
                        //TODO: need something for the statement?
                        }
            | Type ID ASSIGN Exp SC     {Type_c* type = (Type_c*)$1;
                                        ID_c* id = (ID_c*)$2;
                                        Exp_c* exp = (Exp_c*)$4;
                                        if (sym_table->isAlreadyDecInScope(id->name)) {
                                                errorDef(yylineno, id->name);
                                                exit(1);
                                        }
                                        if (checkTypeExp(*type, *exp)) {
                                                 errorMismatch(yylineno);
                                                 exit(1);
                                        }
                                        sym_table->insert(sym_table->tables.top(), id->name, type->type, sym_table->offsets.top() + 1);
                                        id->type = type->type;
                                        //TODO: need something for the statement?
                                        }
            | ID ASSIGN Exp SC
            {
                ID_c* id = (ID_c*)($1);
                Exp_c* exp = (Exp_c*)$4;
                if(sym_table->isDec(id->name))
                {
                     errorUndef(yylineno, id->name);
                     exit(1);
                }
                 if (checkTypeExpId(*id, *exp)) {
                     errorMismatch(yylineno);
                     exit(1);
                }
            }
            | Call SC
            | RETURN SC
            | RETURN Exp SC
            | IF ScopeOpen LPAREN Exp RPAREN Statement {sym_table->closeScope();}
            | IF ScopeOpen LPAREN Exp RPAREN Statement ELSE Statement {sym_table->closeScope();}
            | WHILE ScopeOpen LPAREN Exp RPAREN Statement {sym_table->closeScope();}
            | BREAK SC
            | CONTINUE SC
Call : ID LPAREN ExpList RPAREN
    | ID LPAREN RPAREN
ExpList : Exp
        | Exp COMMA ExpList
Type : INT  {$$ = new Type_c(Int_t);}
        | BYTE {$$ = new Type_c(Byte_t);}
        | BOOL {$$ = new Type_c(Bool_t);}
Exp : LPAREN Exp RPAREN
    | Exp IF LPAREN Exp RPAREN ELSE Exp
    | Exp PLUS_MINUS Exp
    | Exp MULT_DIV Exp
    | ID        {ID_c* id = (ID_c*)($1);
                if(sym_table->isDec(id->name)) {
                        errorUndef(yylineno, id->name);
                        exit(1);
                }
                $$ = new Exp_c(NONE_t);}
    | Call
    | NUM {$$ = new Exp_c(Int_t);}
    | NUM B {$$ = new Exp_c(Byte_t);}
    | STRING {$$ = new Exp_c(String_t);}
    | TRUE {$$ = new Exp_c(Bool_t);}
    | FALSE {$$ = new Exp_c(Bool_t);}
    | NOT Exp {if (checkBoolExp(*(Exp_c*)$1))
                    $$ = new Exp_c(Bool_t);
                else
                    errorMismatch(yylineno);
                    exit(1);}
    | Exp AND Exp {if (checkBoolExp(*(Exp_c*)$1, *(Exp_c*)$3))
                        $$ = new Exp_c(Bool_t);
                   else
                        errorMismatch(yylineno);
                        exit(1);}
    | Exp OR Exp {if (checkBoolExp(*(Exp_c*)$1, *(Exp_c*)$3))
                        $$ = new Exp_c(Bool_t);
                  else
                        errorMismatch(yylineno);
                        exit(1);}
    | Exp RELOP Exp
    | Exp EQUAL_RELOP Exp
    | LPAREN Type RPAREN Exp
ScopeOpen : /* Epsilon */ {sym_table->newScope();}
%%
int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
}
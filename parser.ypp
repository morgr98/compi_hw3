%{
#include "output.hpp"
#include <iostream>
#include <stdlib.h>
extern int yylex();
extern int yylineno;
using namespace output;
int yyerror(const char * message);
%}

%nonassoc ID STRING NUM VOID INT BYTE B BOOL
%right ASSIGN
%left OR
%left AND
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc WHILE
%nonassoc IF
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc COMMA
%nonassoc LBRACE
%nonassoc RBRACE
%left EQUAL_RELOP
%left RELOP
%left MULT_DIV
%left PLUS_MINUS
%right NOT
%left LPAREN
%left RPAREN
%left SC
%nonassoc ELSE

%%
Program : Funcs
Funcs : /* Epsilon */
Funcs : FuncDecl Funcs
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE
RetType : Type
RetType :  VOID
Formals : /* Epsilon */
Formals : FormalsList
FormalsList : FormalDecl
FormalsList : FormalDecl COMMA FormalsList
FormalDecl : Type ID
Statements : Statement
Statements : Statements Statement
Statement : LBRACE Statements RBRACE
Statement : Type ID SC
Statement : Type ID ASSIGN Exp SC
Statement : ID ASSIGN Exp SC
Statement : Call SC
Statement : RETURN SC
Statement : RETURN Exp SC
Statement : IF LPAREN Exp RPAREN Statement
Statement : IF LPAREN Exp RPAREN Statement ELSE Statement
Statement : WHILE LPAREN Exp RPAREN Statement
Statement : BREAK SC
Statement : CONTINUE SC
Call : ID LPAREN ExpList RPAREN
Call : ID LPAREN RPAREN
ExpList : Exp
ExpList : Exp COMMA ExpList
Type : INT
Type : BYTE
Type : BOOL
Exp : LPAREN Exp RPAREN
Exp : Exp IF LPAREN Exp RPAREN ELSE Exp
Exp : Exp PLUS_MINUS Exp
Exp : Exp MULT_DIV Exp
Exp : ID
Exp : Call
Exp : NUM
Exp : NUM B
Exp : STRING
Exp : TRUE
Exp : FALSE
Exp : NOT Exp
Exp : Exp AND Exp
Exp : Exp OR Exp
Exp : Exp RELOP Exp
Exp : Exp EQUAL_RELOP Exp
Exp : LPAREN Type RPAREN Exp
%%
int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
}